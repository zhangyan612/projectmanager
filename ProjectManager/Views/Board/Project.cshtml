@{
    ViewBag.Title = "Project Board";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <link rel="stylesheet" href="~/Content/jKanban/jkanban.min.css">
    <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet">
    <style>
        body {
            font-family: "Lato";
            margin: 0;
            padding: 0;
        }

        #myKanban {
            overflow-x: auto;
            padding: 20px 0;
        }

        .success {
            background: #00B961;
        }

        .info {
            background: #2A92BF;
        }

        .warning {
            background: #F4CE46;
        }

        .error {
            background: #FB7D44;
        }

        .kanban-drag {
            background: #f5f5f5;
            padding: 20px 10px;
            min-height: 600px;
            height: 600px;
            max-height: 600px;
            overflow-y: auto;
        }

        .kanban-item {
            font-family: "Lato", helvetica, Arial, Sans-serif;
            border: 1px solid #E0E1E2;
            border-radius: 5px;
            padding: 15px;
            background: white;
            position: relative;
            margin-bottom: 5px;
            box-shadow: 0px 3px 4px 0px rgba(0, 0, 0, 0.06);
        }

            .kanban-item:hover {
                cursor: pointer;
            }

            .kanban-item:after {
                content: "";
                position: absolute;
                top: 5px;
                bottom: 5px;
                left: 5px;
                width: 4px;
                background: #71c755;
                border-top-left-radius: 5px;
                border-bottom-left-radius: 5px;
            }

        .kanban-board-header {
            padding: 12px;
        }
    </style>
}

<h3>Project Work Flow</h3>

<div class="btn-group" role="group">
    <a href="@Url.Action("Index", "Projects")" class="btn btn-default btn-xs">< Back</a>
    <a href="@Url.Action("Project","Tasks")/@ViewBag.ID" class="btn btn-default btn-xs">Task List</a>
    <a href="@Url.Action("Project","Board")" class="btn btn-default btn-xs">Work Flow</a>
    <a href="@Url.Action("Details","Projects")/@ViewBag.ID" class="btn btn-default btn-xs">Time Management</a>
</div>




<div id="myKanban"></div>

@*<form>
        <div class="form-group">
            <textarea class="form-control" rows="2"></textarea>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary btn-xs pull-right">Submit</button>
            <button type="button" class="btn btn-default btn-xs pull-right">Cancel</button>
        </div>
    </form>*@


<script src="~/Scripts/jKanban/jkanban.min.js"></script>
@section scripts {

    <script>

    var KanbanBoard = new jKanban({
        element: '#myKanban',
        gutter: '10px',
        widthBoard: '400px',
        addItemButton: true,
        click: function (el) {
            // add method to change item into form
            var text = el.innerHTML;
            var boardId = el.parentNode.parentNode.getAttribute("data-id");
            createForm(text, "Edit", boardId, "", el)
        },
        dragEl: function (el, source) {
            // callback when any board's item are dragged
            console.log(el)
            console.log(source)
        },
        dragendEl: function (el) {
            // callback when any board's item stop drag
            var itemId = el.getAttribute("data-eid");
            var targetBoardId = el.parentNode.parentNode.getAttribute("data-id");
            //console.log(itemId)
            //console.log(targetBoardId)
            updateBoardItem(itemId, targetBoardId)
        },
        dragBoard: function (el, source) { },     // callback when any board stop drag
        dragendBoard: function (el) { },              // callback when any board stop drag
        buttonClick: function (el, boardId) {
            console.log(boardId);
            var name = el.previousSibling.innerHTML
            // ajax to add
            //addBoardItem(boardId);
            var formItem = createForm("", "Create", boardId, name)
        },
        boards: []
    });

    function createForm(text, action, boardId, name, el) {
        // scan for formid, if not exist, continue
        var formItem = document.getElementById("itemForm");
        var deleteBtn =""
        if (formItem) {
            $("#itemForm").focus();
        } else {
            if (action == 'Edit') {
                el.style.display = 'none';
            }
            formItem = document.createElement('form');
            formItem.setAttribute("id", "itemForm");
            if (!text) { text = "" }
            if (action == "Edit") {
                deleteBtn = '<button type="button" id="deleteBtn" class="btn btn-danger btn-xs pull-right">Delete</button>'
            }
            formItem.innerHTML = '<div class="form-group"><textarea class="form-control" name="text" rows="2">' + text + '</textarea></div>'
            formItem.innerHTML += '<div class="form-group"><button type="submit" class="btn btn-primary btn-xs pull-right">Save</button><button type="button" id="CancelBtn" class="btn btn-default btn-xs pull-right">Cancel</button>' + deleteBtn+'</div>'

            formItem.querySelector('textarea').autofocus = true;
            KanbanBoard.addForm(boardId, formItem);
            // listen for form submit and post content to api
            $("#itemForm").submit(function (e) {
                e.preventDefault();
                var sendData = $("#itemForm").serialize();
                sendData += "&id=" + boardId + "&pid=@ViewBag.ID" + "&bName=" + name + "&action=" + action;
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("BoardItemData", "Board")",
                    data: sendData,
                    success: function (data) {
                        var task = JSON.parse(data);
                        //console.log(task)
                        if (task) {
                            KanbanBoard.addElement(boardId, {
                                "title": task.Text,
                                "id": task.Id
                            })
                            formItem.parentNode.removeChild(formItem);
                        }
                    },
                    error: function (err) {
                        alert(err);
                    }
                });
            });
        }

        $("#CancelBtn").click(function () {
            if (action == 'Edit') {
                //console.log(el);
                el.style.display = 'block';
            }
            formItem.parentNode.removeChild(formItem);
        });

        // delete board item
        $("#deleteBtn").click(function () {
            //var sendData = $("#itemForm").serialize();
            var id = el.getAttribute("data-eid");
            $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteItem", "Board")",
                    data: { id: id },
                    success: function (data) {
                        console.log(data);
                        formItem.parentNode.removeChild(formItem);
                    },
                    error: function (err) {
                        alert(err);
                    }
            });
        });

    }

    function parseTasks(taskList) {
        //console.log(taskList.length)
        var tasks = []
        if (taskList) {
            for (a = 0; a < taskList.length; a++) {
                tasks.push({ "id": taskList[a].Id, "title": taskList[a].Text })
            }
        }
        return tasks;
    }

    //add board function
    function addBoard(boards) {
        for (i = 0; i < boards.length; i++) {
            //transform task list
            var boardItem = [{
                "id": boards[i].Id,
                "title": boards[i].Name,
                "class": boards[i].cssClass,
                "item": parseTasks(boards[i].Tasks)
            }];
            KanbanBoard.addBoards(boardItem)
        }
    }

    //get all board details for this project
    $.ajax({
        url: "@Url.Action("Details", "Board")?pid=@ViewBag.ID",
        success: function (result) {
            var boards = JSON.parse(result);
            //console.log(boards);
            addBoard(boards);
        },
        error: function (err) {
            console.log(err);
            alert(err);
        }
    });

    //move task to other board
    function updateBoardItem(itemId, boardId) {
        $.ajax({
            url: "@Url.Action("UpdateBoardItem", "Board")",
            type: "Post",
            data: { id: itemId, targetId: boardId},
            success: function (result) {
                console.log(result);
            },
            error: function (err) {
                console.log(err);
                alert(err);
            }
        });
    }

    //Add board

    //delete board


    </script>
}